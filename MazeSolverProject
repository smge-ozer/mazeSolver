public class MazeSolverProject {

    public static void main(String[] args) {
        int grid = 5; 
        int[][] maze = getMaze(grid); 
        maze = MazeResizer.settingMaze(maze); 
        

        Stack<int[]> path = new Stack<>();
        int[] start = {1, 1}; 
        path.push(start);
        maze[start[0]][start[1]] = 2; 
        MazeUtility.plotMaze(maze);

        int[] end = {8, 8}; 
        
        while (!path.isEmpty()) {
    int[] current = path.peek();

    if (current[0] == end[0] && current[1] == end[1]) {
        System.out.println("Solution found!");
        MazeUtility.plotMaze(maze);
        break;
    }

    boolean moved = false;
    int[][] moves = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
    for (int[] move : moves) {
        int newX = current[0] + move[0];
        int newY = current[1] + move[1];

        if (newX >= 1 && newX <= 8 && newY >= 1 && newY <= 8 && maze[newX][newY] == 0) {
            path.push(new int[]{newX, newY});
            maze[newX][newY] = 2; 
            MazeUtility.plotMaze(maze);
            moved = true;
            break;
        }
    }

    if (!moved) {
        
        maze[current[0]][current[1]] = 3;
        path.pop();
        MazeUtility.plotMaze(maze);
    }
}

        if (path.isEmpty()) {
            System.out.println("No solution!");
        }
    }

   public static int[][] getMaze(int grid) {
        MazeGenerator maze = new MazeGenerator(grid);
        String str = maze.toString();
        
        int[][] maze2D = MazeUtility.Convert2D(str);    
        return maze2D;
    }   
   
}
